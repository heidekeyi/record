* Base
** boolean
   #+BEGIN_SRC typescript
     let b1: boolean = true,
	 b2 = false;
   #+END_SRC
** number
   #+BEGIN_SRC typescript
     let n1: number = 100,
	 n2 = 0xff,
	 n3 = 0b111,
	 n4 = 0o755;
   #+END_SRC
** string
   #+BEGIN_SRC typescript
     let s1: string = 'a',
	 s2 = 'b',
	 s3 = `${s2}--${s1}`;
   #+END_SRC
** array
   #+BEGIN_SRC typescript
     let a1: number[] = [1, 2],
	 a2: Array<number> = [1, 1],
	 a3: number[][] = [[1], [1, 2]],
	 a4: Array<Array<string>> = [['s'], ['str', 'test']];
   #+END_SRC
** tuple
   #+BEGIN_SRC typescript
     let t1: [string, number] = ['a', 1],
	 t2: [number, number][] = [[1, 2], [100, 1]],
	 t3: Array<[string, number]> = [['a', 1], ['b', 10]];
   #+END_SRC
** enum
   #+BEGIN_SRC typescript
     enum Color {
	 red, //0
	 green, //1
	 blue = 11,
	 white //12
     }

     let e1: Color = 3,
	 e2 = Color.red, //0
	 e3: string = Color[1]; //red
     // console.log(e1, e2, e3);
   #+END_SRC
** any
   #+BEGIN_SRC typescript
     let a1: any = 10;
     a1 = [1];
     a1 = 'a';
   #+END_SRC
** void
   #+BEGIN_SRC typescript
     let v1: void = undefined;
     let v2 = (): void => {
     };
   #+END_SRC
** never
   #+BEGIN_SRC typescript
     let n1 = (msg: string): never => {
	 throw new Error(msg)
     };
     let n2 = (): never => {
	 while (true) {

	 }
     };
   #+END_SRC
** object
   #+BEGIN_SRC typescript
     enum Color {
	 red,
	 green
     }

     class Person {
     }

     let o1: object = {},
	 o2: object = [],
	 o3: object = () => {

	 },
	 o4: object = Color,
	 o5: object = Person;
   #+END_SRC
** type assert
   #+BEGIN_SRC typescript
     let a1: any = 123;
     //output undefined follow expression
     console.log(a1.length);
     console.log((a1 as string).length);
     console.log((<string>a1).length);
   #+END_SRC
* 基本类型
** number
   #+BEGIN_SRC typescript
     let n:number = 1;
     n = 1.2;
     n = NaN;
   #+END_SRC
** boolean
   #+BEGIN_SRC typescript
     let b : boolean = true;
     b = false;
   #+END_SRC
** string
   #+BEGIN_SRC typescript
     let s :string = '';
     s = '1a2';
   #+END_SRC
** undefined
   #+BEGIN_SRC typescript
     let u : undefined = undefined;
   #+END_SRC
** null
   #+BEGIN_SRC typescript
     let n : null = null;
   #+END_SRC
** symbol
   具体使用参看高4
   #+BEGIN_SRC typescript
     let s: symbol = Symbol();
     s = Symbol('ab');
     // 全局对象
     s = Symbol.for('ab');
     let key: string | undefined = Symbol.keyFor(s);

     // 全局对象根据key值比较
     // 非全局的创建的对象都是唯一的
     let loc1: symbol = Symbol('ab');
     let loc2: symbol = Symbol('ab');
     let gol1: symbol = Symbol.for('ab');
     let gol2: symbol = Symbol.for('ab');
     console.log(loc1 === loc2); //false
     console.log(gol1 === gol1); //true
     console.log(loc1 === gol1); //false
   #+END_SRC
** array
   #+BEGIN_SRC typescript
     // 其他的类型类似
     // 保证类型相同
     let l1 : [] = [];
     let l2 : number[] = [1, 2];
     let l3 : null[] = [null, null];
   #+END_SRC
** tuple
   #+BEGIN_SRC typescript
     // 类型和长度都是固定的
     let t1 : [string, number] = ['a', 1];
     // 元组数组
     let t2 : [string, number][] = [['a', 1], ['b', 1]]
   #+END_SRC
** object
   #+BEGIN_SRC typescript
     // 对象类型可以被赋值为多种形式
     let o: object;
     o = {}
     o = [];
     o = [['a', 1]]
     o = () => {

     };
   #+END_SRC
** any
   #+BEGIN_SRC typescript
     // 任意类型
     let a : any = 1;
     a = null;
     a = [];
   #+END_SRC
** enum
   #+BEGIN_SRC typescript
     // 枚举
     enum e {
	 a, //0
	 b = 10,
	 c = 100,
	 d //101
     }
     if(e.a === 0){}
     // 实现的一些想法
     // const a: any = {};
     // a[a['SUPER_ADMIN'] = 0] = 'SUPER_ADMIN';
   #+END_SRC
** void
   #+BEGIN_SRC typescript
     let v6: void;
     v6 = undefined;
     // 作为函数返类型
     const ftv = (): void => {
     };
   #+END_SRC
** never
   #+BEGIN_SRC typescript
     // never 死循环
     let ftn = function (a: number): never {
	 while (true) {
	 }
     };
     // 抛出错误
     let ftt = (msg: string): never => {
	 throw new Error(msg);
     }
   #+END_SRC
** assert
  #+BEGIN_SRC typescript
    // 类型断言
    // 第一种写法
    let l = {};
    (l as []).length
    // 第二种写法
    // 避免提示需要初始化
    let v1 = '1';
    (<string>v1).length;
  #+END_SRC
** alias
   #+BEGIN_SRC typescript
     // 类型别名
     // 一般类型
     type isNum = number;
     type isStr = string;
     let n: isNum = 123;
     let s: isStr = '123';

     // 函数类型
     type Fn = (a: number, b: number) => number;
     let f: Fn = (a, b) => a + b;
     f(1, 2);
   #+END_SRC
* interface
** use
*** base
   #+BEGIN_SRC typescript
     interface A {
	 0 : string,
	 1 : string,
	 2 : number
     }
     // 数组，元组效果
     let a : A = ['a', 'b', 2];
     // 类对象
     let b : A = {
	 0 : 'a',
	 1 : 'b',
	 2 : 2
     }
   #+END_SRC
*** option
    #+BEGIN_SRC typescript
      //gender?: string 可选参数
      interface Person {
	  name: string,
	  age: number,
	  gender?: string
      }

      let p: Person = {
	  name: 'alex',
	  age: 28
      }
      p = {
	  name : 'Bob',
	  age : 56,
	  gender : 'male'
      }
    #+END_SRC
*** readonly
    #+BEGIN_SRC typescript
      // 属性name初始化后不能修改
      interface Person {
	  readonly name: string,
	  age: number
      }

      let p: Person = {
	  name: 'test',
	  age: 23
      };
    #+END_SRC
*** function
    #+BEGIN_SRC typescript
      interface Fn {
	  (a: number, b: number): number
      }

      let fn: Fn = (a, b) => a + b;

      // 提示一般函数有name,length等内置属性
      interface Fd {
	  (a: number, b: number): number,

	  name: string,
	  length: number
      }

      let fd: Fd = (a, b) => a + b;
      console.log(fd.name, fd.length);
    #+END_SRC
*** index signature
    #+BEGIN_SRC typescript
      // 指定key类型 [key: string]
      // key 可以换成其他单词如id
      interface Score {
	  [key: string]: string
      }

      let s: Score = {a: '1'};
      // 数字自动转字符串
      s = {0: '1'};
    #+END_SRC
*** redundant
    绕过多余属性检查
- assgin
  #+BEGIN_SRC typescript
    interface Person {
	name: string,
	age: number
    }

    const data = {
	name: 'test',
	age: 23,
	height: 178
    };
    let p: Person = data;
  #+END_SRC
- assert
  #+BEGIN_SRC typescript
    // 类型断言
    interface Person {
	name: string,
	age: number
    }

    let p: Person = ({
	name: 'test',
	age: 23,
	height: 178
    } as Person);
  #+END_SRC
- index signature
  #+BEGIN_SRC typescript
    // 索引签名
    interface Person {
	name: string,
	age: number,

	[index: number]: string,
    }

    let p: Person = {
	name: 'test',
	age: 23,
	12: '1'
    };
  #+END_SRC

** inherit
   #+BEGIN_SRC typescript
     interface Person {
	 name: string,
	 age: number
     }
     // 单继承
     interface Worker extends Person {
	 department: string,
	 salary : number
     }

     interface Course {
	 class: string,
	 teacher: string
     }
     // 多继承
     interface Student extends Person, Course {
	 grade: number
     }

     // 拥有所有继承的属性
     let p : Student = {
	 name : 'Li',
	 age : 22,
	 class : '032',
	 teacher : 'Wang',
	 grade : 4
     }
   #+END_SRC

* function
*** definition
   #+BEGIN_SRC typescript
     // 函数类型定义
     // 两者效果是一样的
     interface F1 {
	 (a: number, b: number): number
     }

     type F2 = (a: number, b: number) => number;
     let f = (a: number, b: number): number => a + b;
     let f1: F1 = f;
     let f2: F2 = f;
     let f3: F1 = f2;
   #+END_SRC
*** option
    #+BEGIN_SRC typescript
      // 可选参数
      type Fn = (a: number, b?: number) => number;
      // 一个参数
      let f1: Fn = a => a;
      // 省略以后是undefined
      let f2: Fn = (a, b: undefined | number) => {
	  let res = a;
	  if (b !== undefined) {
	      res = a + (b as number);
	  }
	  return res;
      }
    #+END_SRC
*** default
    #+BEGIN_SRC typescript
      // 默认参数
      type Fn = (a: number, b: number) => number;
      let f: Fn = (a, b = 0) => a + b;
    #+END_SRC
*** rest
    #+BEGIN_SRC typescript
      // 可变参数（rest参数）
      type Fn = (a: number, ...rest: number[]) => number;
      let f1: Fn = (a, b, c = 0) => a + b + c;
      let f2: Fn = (x, ...rest) => x + rest.length;
    #+END_SRC
*** overload
    #+BEGIN_SRC typescript
      // 函数重载
      function getLen(a: number): number;
      function getLen(a: string): number;
      function getLen(a:any) {
	  let s: string;
	  if (typeof a === 'string') {
	      s = a;
	  } else {
	      s = (a as number).toString();
	  }
	  return s.length;
      }
      console.log(getLen(123));
      console.log(getLen('22'));
    #+END_SRC
* generics
** definition
   #+BEGIN_SRC typescript

     // f1 f2 f3等价
     // 直接定义
     let f1 = <T, U>(a: T, b: U, times: number): [T, U][] => {
	 return new Array(times).fill([a, b]);
     }
     // 使用类型别名
     type Fn = <T, U>(a: T, b: U, times: number) => [T, U][];
     let f2: Fn = (a, b, times) => {
	 return new Array(times).fill([a, b]);
     }
     // 使用接口
     interface Ft{
	 <T, U>(a: T, b: U, times: number): [T, U][]
     }
     let f3: Ft = (a, b, times) => {
	 return new Array(times).fill([a, b]);
     }

     f2 = f1;
     f2 = f3;
     f2<string, number>('hello', 2, 5)
	 .map((it, ix) => {
	     const [f, s] = it;
	     return [f, s * ix * ix * ix]
	 })
	 .forEach(it => console.log(it));
   #+END_SRC
** constraint
   #+BEGIN_SRC typescript
     // constraint
     interface len {
	 length: number
     }

     // 泛型函数
     // 获取对象的具体属性
     let f1 = <T extends len>(a: T): number => a.length;
     type F1 = <T extends len>(a: T) => number;
     f1([]);
     // 获取对象的某属性
     type F2 = <T, U extends keyof T, K>(ob: T, key: U) => K;
     let f2 = <T, U extends keyof T>(ob: T, key: U) => ob[key];
     f2({a : 13}, "a");
   #+END_SRC
** alias function with property
   #+BEGIN_SRC typescript
     // 类型别名
     // 函数对象包含属性
     interface Ft<T, U>{
	 <T, U>(a: T, b: U, times: number): [T, U][],

	 level: U
     }
     // 只能用const定义，不等用let定义
     const f1:Ft<string, number> = function(a, b, times) {
	 return new Array(times).fill([a, b]);
     }
     f1.level = 10;
   #+END_SRC
** class
   #+BEGIN_SRC typescript

     // 泛型中使用类类型
     // new() => T 模板类型声明
     const fn = <T>(o: new() => T): T => new o();

     class H {
	 private n: number = 10;
     }

     console.log(fn(H));
   #+END_SRC
* class
** 访问级别  
   #+BEGIN_SRC typescript
     // 访问级别
     // public 公共 都可以用
     // private 私有 本类中可以使用
     // protected 保护 本类及继承它的类

     // readonly 只读属性，初始化之后就不能修改了
     class Person {
	 private name: string;
	 protected age: number;
	 public readonly type: string = 'body';

	 public constructor(name: string, age: number) {
	     this.name = name;
	     this.age = age;
	 }
     }


   #+END_SRC
** 构造参数属性
   #+BEGIN_SRC typescript
     // 参数属性
     // 参数前面可以使用上面的任意修饰符
     // 自动添加到实例上面
     class A {
	 constructor(public readonly name: string, private age: number) {
	 }
     }

     // new A('name', 1)
   #+END_SRC
** 类属性和方法
   #+BEGIN_SRC typescript
     // 类属性和类方法
     class B {
	 public static readonly age: number = 10;

	 public static getAge() {
	     return B.age;
	 }
     }
   #+END_SRC
** 带存储器的可选类
   #+BEGIN_SRC typescript
     // 可选类（构造函数可选参数）
     // 存储器（age）
     class C {
	 private name: string;
	 private age: number | undefined;

	 public constructor(name: string, age?: number, protected height?: number) {
	     this.name = name;
	     this.age = age;
	 }

	 public getAge() {
	     return this.age;
	 }

	 public setAge(age: number | undefined) {
	     this.age = age;
	 }
     }


     // let a = new C('n', 1);
     // console.log(a);
     // a= new C('n', 1, 2);
     // console.log(a);
   #+END_SRC
** 抽象类、属性、存储器
   #+BEGIN_SRC typescript

     // 抽象类
     // 抽象属性
     // 抽象存储器
     abstract class D {
	 protected abstract name: string;

	 public abstract getName(): string

	 public abstract setName(name: string): void
     }
     // 实现类
     class E extends D {
	 protected name: string;

	 constructor(name: string) {
	     super();
	     this.name = name;
	 }

	 public getName(): string {
	     return this.name;
	 }

	 public setName(name: string): void {
	     this.name = name;
	 }
     }

     // let a = new E('e');
     // console.log(a);
   #+END_SRC
** 接口
   #+BEGIN_SRC typescript
     // 接口
     // 实例的属性和方法
     interface FI {
	 name: string;
	 age: number;
     }

     // 实现接口
     class F implements FI {
	 constructor(public name: string, public age: number) {
	 }

	 public getName(): string {
	     return this.name;
	 }

	 public setName(name: string): void {
	     this.name = name;
	 }
     }

     // 接口继承属性和接口
     interface GI extends F {
	 height: number
     }

     // 继承类和实现接口
     class G extends F implements GI {
	 constructor(name: string, age: number, public height: number) {
	     super(name, age);
	 }
     }
   #+END_SRC
** 
* 补充知识
** enum
   - 数字枚举
     #+BEGIN_SRC typescript
       // 数字枚举
       // 元素不能是数字
       enum Status{
	   open, //0
	   send, //1
	   finish=10,
	   close //11
       }

       // console.log(Status)
     #+END_SRC
   - 字符串枚举
     #+BEGIN_SRC typescript

       // 字符串枚举
       // 元素全为字符串
       enum Message{
	   err = 'error',
	   suc = 'success',
	   fai = 'failure'
       }

       // console.log(Message)
     #+END_SRC
   - 异构枚举
     #+BEGIN_SRC typescript
       // 异构枚举
       // 同时又数字和字符串
       // 字符串及其之后的元素一定要指定值
       enum Mix {
	   start,
	   end,
	   a = 'a',
	   b = 'b',
	   c = 10
       }

       // console.log(Mix)
       // 接口中应用，提高可读性
       interface Req {
	   type : Message.err
       }
       let q:Req = {
	   type : Message.err
       }
     #+END_SRC
   - const 枚举
     #+BEGIN_SRC typescript

       // const 枚举
       // 变异后不生成对象，直接替换成值
       const enum Animal{
	   Dog,
	   Cat
       }
       // Animal.Cat === 1
     #+END_SRC
** deduction
   - 单类型
     #+BEGIN_SRC typescript
       // 单类型
       // string
       let name2 = 'name';
     #+END_SRC
   - 多类型联合
     #+BEGIN_SRC typescript
       // 多类型联合
       // (string|number)[]
       let a1 = [1, 'a'];
       a1 = [1, 'a', 'b', 2];
     #+END_SRC
   - 上下文类型
     #+BEGIN_SRC typescript
       // 上下文类型
       // MouseEvent
       window.addEventListener('click', function (e) {
	   console.log(e.clientY);
       });
     #+END_SRC
** 兼容性
   - 属性兼容
     #+BEGIN_SRC typescript

       // 兼容性
       // 有指定类型的属性
       interface II {
	   name: string
       }

       // info属性一定要有age属性
       // 深层次递归检查属性及其类型
       interface III {
	   name: string,
	   info: {
	       age: number
	   }
       }

       let a2: II, a10: III;
       let
	   a3 = {
	       name: 'n'
	   },
	   a4 = {
	       name: 'nn',
	       age: 100,
	       info: {
		   name: 'nnn',
		   age: 1
	       }
	   };
       a2 = a3;
       a2 = a4;
       a10 = a4;
     #+END_SRC
   - 函数兼容性
     #+BEGIN_SRC typescript
       // 函数兼容性
       // 向窄兼容
       // 指定参数变少
       let f1 = (x: number) => 0;
       let f2 = (x: number, b: number) => 0;
       f2 = f1;
       // 剩余参数
       let f3 = (arr: number[], call: (...rest: number[]) => number): number => {
	   return call(...arr);
       };
     #+END_SRC
   - 函数参数双向协变
     #+BEGIN_SRC typescript

       // 函数参数双向协变
       // 可以设置严格检测关闭
       let f4 = (a: string | number): void => {
       };
       let f5 = (a: string): void => {
       };
       let f6 = f5;
       f6 = f4;
       f6 = f5;
     #+END_SRC
   - 返回类型
     #+BEGIN_SRC typescript
       // 返回类型
       let x = (): string | number => 0;
       let y = (): string => 'a';
       // x包含y的情形
       let z = x;
       z = y;
     #+END_SRC
   - 函数重载
     #+BEGIN_SRC typescript
       // 函数重载
       function f1(a: number, b: number): number;
       function f1(a: string, b: string): string;
       function f1(a: any, b: any) {
	   return a + b;
       }

       console.log(f1(1, 2));
       console.log(f1('a', 'b'));

       function sum(a: number, b: number): number;
       function sum(a: any, b: any) {
	   return a + b;
       }
       // f1包含sum的情形
       let f = sum;
       f = f1; //f1变窄
     #+END_SRC
   - 枚举
     #+BEGIN_SRC typescript
       // 枚举
       // 数字兼容，不同枚举类型不兼容
       enum Status {
	   on,
	   off
       }
       let s = Status.off;
       s = 1;
     #+END_SRC
   - 类兼容
     #+BEGIN_SRC typescript
       // 类兼容
       // 实例的属性相同，名称、类型，访问权限
       // 访问权限必须是public
       // 子类向父类兼容
       class A {
	   public constructor(public name:string) {
	   }
       }
       class B {
	   public static age : 100;
	   public constructor(public name:string) {
	   }
       }

       let a = new A('a');
       let b = new B('b');
       a = b;
     #+END_SRC
   - 泛型兼容
     #+BEGIN_SRC typescript
       // 泛型兼容
       // 同类型兼容
       interface G1<T> {
	   val : T
       }
       // g1和g2不兼容，类型不同
       let g1:G1<number>;
       let g2:G1<string>;
     #+END_SRC
* 高级类型
** 交叉类型（并集）
   #+BEGIN_SRC typescript
     // 交叉类型
     // T & U 多个类型的并集
     const merge = <T, U>(a: T, b: U): T & U => {
	 return {
	     ...a,
	     ...b
	 };
     };

     const a = {
	     name: 'name'
	 },
	 b = {
	     age: 111
	 };
     // console.log(merge(a, b).name);
   #+END_SRC
** 联合类型
   #+BEGIN_SRC typescript
     // 联合类型
     // string | number | undefined
     type min = string | number | [string, number];
     let a : min = 'a';
     a = 1;
     a = ['a', 1];
   #+END_SRC
** 类型保护
*** typeof
    #+BEGIN_SRC typescript
      // 类型保护
      // typeof保护（后面可以当某个类型使用）
      // 只对string number boolean symbol有效
      const f1 = (a: number | string): number => {
	  if (typeof a === "string") {
	      return a.length;
	  } else {
	      return a;
	  }
      }
    #+END_SRC
*** instanceof
    #+BEGIN_SRC typescript
      // instanceof保护（当某个类型使用）
      // 作为typeof保护补充，主要针对复杂对象
      class A {
	  public name: string = 'name';
      }

      class B {
	  public age: number = 100;
      }

      let f2 = (v: boolean) => v ? new A() : new B();
      let a1 = f2(true);
      if(a1 instanceof A){
	  console.log(a1.name);
      }else{
	  console.log(a1.age);
      }
    #+END_SRC
*** 可辨识联合
    #+BEGIN_SRC typescript
      // 可辨识联合
      // 具有普通的单例类型属性
      // 类型别名包含哪些类型的联合
      interface c1{
	  k : 'c1',
	  name : string
      }
      interface c2{
	  k : 'c2',
	  name : string,
	  age : number
      }
      interface c3{
	  k : 'c3',
	  height : number
      }
      type c = c1 | c2 | c3;
      let f1 = (o : c):void=>{
	  // 自动根据同一个属性判断是什么类型（接口）的数据
	  switch (o.k) {
	      case "c1":
		  console.log(o.name);
		  break;
	      case "c2":
		  console.log(o.age);
		  break;
	      case "c3":
		  console.log(o.height);
		  break;
	      default:
		  throw new Error(`${o} unknown type`);
	  }
      };
      let a:c = {
	  k : 'c1',
	  name : 'hello world'
      };
      f1(a);
    #+END_SRC

** 严格模式（null, undefined）
   #+BEGIN_SRC typescript
     // null和undefined
     // 高版本默认开严格检测模式
     // 关闭可以赋值给其他对象（是所有类型的子类型）
     let a2 = 123;
     // a2 = null;
   #+END_SRC
** 类型别名
   #+BEGIN_SRC typescript
     // 类型别名
     // 不能继承和实现
     // 扩展时用接口
     // 交叉类型（并集）用别名
     type isString = string;
     type Ob = {
	 a: isString,
	 b: null;
     };
     // 递归使用别名
     // 节点
     type tree<T> = {
	 value: T,
	 next?: tree<T>
     };
     let t1: tree<string> = {
	 value: 'a',
	 next: {
	     value: 'b',
	     next: {
		 value: 'c'
	     }
	 }
     };
   #+END_SRC
** 字面量类型
   只能赋值给定的值
*** 字符串字面量
    #+BEGIN_SRC typescript
      // 字符串字面量
      type Name = 'a' | 'b' | 'c';
      let n1: Name = 'a';
    #+END_SRC
*** 数字字面量
    #+BEGIN_SRC typescript
      // 数字字面量
      type Num = 100 | 1 | 10;
      let n2: Num = 10;
    #+END_SRC
** this 类型
   #+BEGIN_SRC typescript
     // this 类型
     // 链式调用
     class Calculate {
	 public constructor(private val: number = 0) {
	 }

	 public add(val: number): Calculate {
	     this.val += val;
	     return this;
	 }

	 public sub(val: number): Calculate {
	     return this.add(val * -1);
	 }

	 public pow(exp: number) {
	     this.val **= exp;
	     return this;
	 }

	 public successor() {
	     return this.val += 1;
	 }
     }

     const o = new Calculate(2);
     console.log(o.add(2).sub(1).pow(3).successor())
   #+END_SRC
** 索引类型
*** 索引查询
    #+BEGIN_SRC typescript
      // 索引查询
      interface I {
	  name: string,
	  age: number
      }

      // 仅能赋值属性
      let a: keyof I = 'name';
      a = 'age';

      // K extends keyof T：K是T的属性
      // Array<T[K]>：T[K]类型的数组
      let f1 = <T, K extends keyof T>(obj: T, keys: K[]): Array<T[K]> => keys.map(it => obj[it]);
      f1({name:'a', age:1}, ['age']);
    #+END_SRC
*** 索引访问
    #+BEGIN_SRC typescript
      // 索引访问
      interface I {
	  name: string,
	  age: number
      }

      type S = I['name'];
      let a1: S = 's',
	  a2: keyof I = 'name',
	  a3: keyof I = 'age';

      // 类似索引查询
      let f = <T, K extends keyof T>(o: T, k: K): T[K] => o[k];
      f({name: 'a', age: 1}, 'age');

      // 泛型
      // [name: string]：变量是string类型
      // number会转string
      // 实际是number和string联合类型

      interface II<T> {
	  [name: string]: T,
      }

      let a5: II<number> = {a: 12, b: 1, name: 100},
	  a6: II<string> = {a: '1', b: '2', c: '1'};
    #+END_SRC
** 类型联合
   #+BEGIN_SRC typescript
     interface I {
	 a: null,
	 b: undefined,
	 c: never,
	 d: void,
	 e: string,
	 f: symbol,
	 g: number
     }

     // never排除
     // types
     let a1: I[keyof I] = 'str',
	 a2: I[keyof I] = null,
	 // keys
	 a3: keyof I = 'a',
	 a4: keyof I = 'g',
	 // type
	 a5: I['f'] = Symbol('s'),
	 a6: I['g'] = 100;
   #+END_SRC
** 映射类型
// 同态：相同类型
*** 只读属性
    #+BEGIN_SRC typescript
      interface I {
	  age: number
      }

      // 手动添加
      interface Re1 {
	  readonly age: number
      }

      // 多个属性自动添加额外的特征
      type Re2<T> = {
	  readonly [P in keyof T]: T[P]
      }
      type ReIII = Re2<I>;

      // 内置方案
      type ReI4 = Readonly<I>;
    #+END_SRC
*** 可选属性
    #+BEGIN_SRC typescript
      interface I {
	  age: number
      }

      // 手动修改
      interface ReI {
	  age?: number
      }

      // 内置方案
      type Re2 = Partial<I>;
    #+END_SRC
*** 部分属性选择
    #+BEGIN_SRC typescript
      let f1 = <T, K extends keyof T>(obj: T, names: K[]): Pick<T, K> => {
	  const res: any = {};
	  names.forEach(it => res[it] = obj[it]);
	  return res;
      };
      const a1 = f1({name : 'name', age:100, height:100}, ['name', "age"]);
      console.log(a1);
    #+END_SRC
*** 属性对应的值变换
    #+BEGIN_SRC typescript
      let f1 = <T, U, K extends string | number>(obj: Record<K, T>, f: (x: T) => U): Record<K, U> => {
	  const res: any = {};
	  (Object.keys(obj) as K[]).forEach(it => res[it] = f(obj[it]));
	  return res;
      };

      const t = {1: 'bit', 2: 'byte', len: 'max-length'};
      console.log(f1(t, (s: string) => s.length));
    #+END_SRC
*** 存储器
    #+BEGIN_SRC typescript
      // 存储器
      interface Pack<T> {
	  get(): T,

	  set(v: T): void
      }

      type Packer<T> = {
	  [P in keyof T]: Pack<T[P]>
      }

      let f1 = <T>(o: T): Packer<T> => {
	  const res = {} as Packer<T>;
	  (Object.keys(o) as Array<keyof T>)
	      .forEach(it => res[it] = {
		  get: () => o[it],
		  set: (v) => o[it] = v
	      })
	  return res;
      }

      let f2 = <T>(o: Packer<T>): T => {
	  const res = {} as T;
	  (Object.keys(o) as Array<keyof T>)
	      .forEach(it => res[it] = o[it].get());
	  return res;
      }

      let a1 = f1({name: 'a', age: 1});
      a1.name.set('hello');
      a1.age.set(100);
      console.log(a1.name.get(), a1.age.get());
      console.log(f2(a1));
    #+END_SRC
*** 修改属性
    #+BEGIN_SRC typescript
      // 增加移除单个属性、多个属性
      // +增加（可选，可以不写）
      // -移除
      type I = {
	  a: string
      }
      // 增加只读和可选属性
      // 定义后不能修改
      type I1<T> = {
	  +readonly [P in keyof T]+?: T[P]
      }
      // 去除只读和可选属性
      type I2<T> = {
	  -readonly [P in keyof T]-?: T[P]
      }

      // I3都是可读可选
      // I4可写
      type I3 = I1<I>;
      type I4 = I2<I>;

      let p1: I3 = {
	      a: '1'
	  },
	  p2: I3 = {},
	  p3: I4 = {
	      a: '1'
	  };
      p3.a = '2';
    #+END_SRC
*** 属性使用number和symbol
    #+BEGIN_SRC typescript

      // 属性使用number和symbol
      const str = 's',
	  num = 1,
	  sym = Symbol('1');
      type I = {
	  [str]: string,
	  [num]: number,
	  [sym]: symbol
      }
      type K = keyof I;
      type MR<T> = {
	  +readonly [P in keyof T]: T[P]
      }
      // let a: Readonly<I> = {
      let a: MR<I> = {
	  s: '11',
	  1: 1,
	  [sym]: Symbol('test')
      };
      // console.log(a);
    #+END_SRC
*** 元组和数组
    #+BEGIN_SRC typescript
      // 元组和数组映射
      type Tuple = [string, number];
      type PT<T> = {
	  [P in keyof T]: Promise<T[P]>
      }
      let a2: PT<Tuple> = [
	  new Promise(() => 'a'),
	  new Promise(() => 1),
      ];
    #+END_SRC
*** unknown
